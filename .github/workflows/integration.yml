name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  workflow_dispatch:

jobs:
  test-consumer-project:
    name: Test Consumer Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install Conan
        run: |
          pip install conan==2.21.0
          conan --version
      
      - name: Configure Conan Remote
        run: |
          conan remote add sparesparrow-conan-openssl-conan \
            https://dl.cloudsmith.io/public/sparesparrow-conan/openssl-conan/conan/ \
            --force
      
      - name: Detect Conan Profile
        run: conan profile detect --force
      
      - name: Create Test Consumer Project
        run: |
          mkdir -p test-consumer
          cd test-consumer
          
          # Create conanfile.txt
          cat > conanfile.txt << 'EOF'
          [requires]
          sparetools-openssl/2.0.0
          
          [tool_requires]
          sparetools-openssl-tools/2.0.0
          
          [generators]
          CMakeDeps
          CMakeToolchain
          EOF
          
          # Create CMakeLists.txt
          cat > CMakeLists.txt << 'EOF'
          cmake_minimum_required(VERSION 3.15)
          project(TestConsumer)
          
          find_package(OpenSSL REQUIRED)
          
          add_executable(test_app main.cpp)
          target_link_libraries(test_app OpenSSL::SSL OpenSSL::Crypto)
          EOF
          
          # Create main.cpp
          cat > main.cpp << 'EOF'
          #include <openssl/opensslv.h>
          #include <openssl/evp.h>
          #include <iostream>
          
          int main() {
              std::cout << "OpenSSL Version: " << OPENSSL_VERSION_TEXT << std::endl;
              
              // Test basic OpenSSL functionality
              EVP_MD_CTX* ctx = EVP_MD_CTX_new();
              if (ctx == nullptr) {
                  std::cerr << "Failed to create EVP_MD_CTX" << std::endl;
                  return 1;
              }
              EVP_MD_CTX_free(ctx);
              
              std::cout << "✅ OpenSSL integration test passed!" << std::endl;
              return 0;
          }
          EOF
      
      - name: Install Dependencies
        run: |
          cd test-consumer
          conan install . --build=missing -r sparesparrow-conan-openssl-conan
      
      - name: Build Consumer Project
        run: |
          cd test-consumer
          cmake --preset conan-release
          cmake --build --preset conan-release
      
      - name: Run Consumer Test
        run: |
          cd test-consumer/build/Release
          ./test_app
  
  test-fips-configuration:
    name: Test FIPS Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install Conan
        run: |
          pip install conan==2.21.0
          conan --version
      
      - name: Configure Conan Remote
        run: |
          conan remote add sparesparrow-conan-openssl-conan \
            https://dl.cloudsmith.io/public/sparesparrow-conan/openssl-conan/conan/ \
            --force
      
      - name: Detect Conan Profile
        run: conan profile detect --force
      
      - name: Install OpenSSL with FIPS
        run: |
          conan install --requires=sparetools-openssl/2.0.0 \
            -o sparetools-openssl/*:fips=True \
            --build=missing \
            -r sparesparrow-conan-openssl-conan
      
      - name: Verify FIPS Build
        run: |
          echo "FIPS build test would go here"
          # Future: Run actual FIPS validation tests
  
  test-profile-matrix:
    name: Test Profile Matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_method: [perl-configure, cmake-build, autotools]
        feature: [shared-libs, static-only, minimal]
        exclude:
          # Exclude incompatible combinations
          - build_method: cmake-build
            feature: minimal
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install Conan
        run: |
          pip install conan==2.21.0
          conan --version
      
      - name: Configure Conan Remote
        run: |
          conan remote add sparesparrow-conan-openssl-conan \
            https://dl.cloudsmith.io/public/sparesparrow-conan/openssl-conan/conan/ \
            --force
      
      - name: Detect Conan Profile
        run: conan profile detect --force
      
      - name: Test Profile Combination
        run: |
          # Export tool packages first
          conan export packages/sparetools-base --version=2.0.0
          conan export packages/sparetools-openssl-tools --version=2.0.0
          
          # Build with profile combination
          conan create packages/sparetools-openssl \
            --version=2.0.0 \
            -pr:b packages/sparetools-openssl-tools/profiles/build-methods/${{ matrix.build_method }} \
            -pr:b packages/sparetools-openssl-tools/profiles/features/${{ matrix.feature }} \
            --build=missing
  
  integration-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: [test-consumer-project, test-fips-configuration, test-profile-matrix]
    if: always()
    steps:
      - name: Integration Status
        run: |
          echo "## 🧪 Integration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Consumer Project | ${{ needs.test-consumer-project.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| FIPS Configuration | ${{ needs.test-fips-configuration.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Profile Matrix | ${{ needs.test-profile-matrix.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test-consumer-project.result }}" == "success" ] && \
             [ "${{ needs.test-fips-configuration.result }}" == "success" ] && \
             [ "${{ needs.test-profile-matrix.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ All integration tests passed!" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚠️ Some integration tests failed." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

