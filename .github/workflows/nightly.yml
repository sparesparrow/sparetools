name: Nightly Comprehensive Testing

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 02:00 UTC
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Scope of testing'
        required: true
        type: choice
        options:
          - full
          - quick
          - platforms-only
        default: 'full'

permissions:
  contents: read
  issues: write  # For creating issues on failures

jobs:
  prepare-matrix:
    name: Prepare Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate build matrix
        id: generate
        run: |
          # Full comprehensive matrix
          MATRIX='{"include": [
            {"os": "ubuntu-22.04", "profile_base": "linux-gcc11", "build_method": "perl", "python": "3.12", "name": "Linux GCC 11 Perl"},
            {"os": "ubuntu-22.04", "profile_base": "linux-clang18", "build_method": "perl", "python": "3.12", "name": "Linux Clang 18 Perl"},
            {"os": "ubuntu-22.04", "profile_base": "linux-gcc11", "build_method": "cmake", "python": "3.12", "name": "Linux GCC 11 CMake"},
            {"os": "ubuntu-22.04", "profile_base": "linux-clang18", "build_method": "cmake", "python": "3.12", "name": "Linux Clang 18 CMake"},
            {"os": "macos-13", "profile_base": "darwin-clang", "build_method": "perl", "python": "3.12", "name": "macOS Clang Perl"},
            {"os": "macos-13", "profile_base": "darwin-clang-arm64", "build_method": "perl", "python": "3.12", "name": "macOS ARM64 Perl"},
            {"os": "windows-2022", "profile_base": "windows-msvc2022", "build_method": "perl", "python": "3.12", "name": "Windows MSVC Perl"}
          ]}'
          
          # Quick matrix for manual workflow dispatch with "quick" scope
          if [ "${{ github.event.inputs.test_scope }}" == "quick" ]; then
            MATRIX='{"include": [
              {"os": "ubuntu-22.04", "profile_base": "linux-gcc11", "build_method": "perl", "python": "3.12", "name": "Linux GCC 11 Perl"},
              {"os": "macos-13", "profile_base": "darwin-clang", "build_method": "perl", "python": "3.12", "name": "macOS Clang Perl"}
            ]}'
          fi
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Generated matrix:"
          echo "$MATRIX" | jq '.'

  comprehensive-build:
    name: ${{ matrix.name }}
    needs: prepare-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
      
      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          python -m pip install conan==2.21.0
          
      - name: Configure Conan
        run: |
          conan profile detect --force
          conan remote add --force sparesparrow-conan https://conan.cloudsmith.io/sparesparrow-conan/openssl-conan/
          
      - name: Build all packages
        run: |
          echo "🔨 Building all packages for ${{ matrix.name }}..."
          
          # Build in dependency order
          conan create packages/sparetools-base --version=2.0.0 --build=missing
          conan create packages/sparetools-cpython --version=3.12.7 --build=missing
          conan create packages/sparetools-shared-dev-tools --version=2.0.0 --build=missing
          conan create packages/sparetools-bootstrap --version=2.0.0 --build=missing
          conan create packages/sparetools-openssl-tools --version=2.0.0 --build=missing
          
      - name: Build OpenSSL with profile
        run: |
          echo "🔨 Building OpenSSL with ${{ matrix.build_method }} method..."
          
          PROFILE_BASE="packages/sparetools-openssl-tools/profiles/base/${{ matrix.profile_base }}"
          PROFILE_METHOD="packages/sparetools-openssl-tools/profiles/build-methods/${{ matrix.build_method }}-configure"
          
          if [ -f "$PROFILE_BASE" ] && [ -f "$PROFILE_METHOD" ]; then
            conan create packages/sparetools-openssl --version=3.3.2 \
              -pr:b "$PROFILE_BASE" \
              -pr:b "$PROFILE_METHOD" \
              --build=missing
          else
            echo "⚠️ Profile not found, using defaults"
            conan create packages/sparetools-openssl --version=3.3.2 --build=missing
          fi
        shell: bash
          
      - name: Run comprehensive tests
        run: |
          echo "🧪 Running comprehensive tests..."
          
          # Test each package
          cd packages/sparetools-openssl
          conan test test_package sparetools-openssl/3.3.2@ || echo "⚠️ Tests failed"
        shell: bash
        continue-on-error: true
          
      - name: Generate build report
        if: always()
        run: |
          echo "📊 Build Report for ${{ matrix.name }}" > build-report.txt
          echo "=================================" >> build-report.txt
          echo "" >> build-report.txt
          echo "Date: $(date)" >> build-report.txt
          echo "OS: ${{ matrix.os }}" >> build-report.txt
          echo "Profile: ${{ matrix.profile_base }}" >> build-report.txt
          echo "Build Method: ${{ matrix.build_method }}" >> build-report.txt
          echo "" >> build-report.txt
          echo "Packages Built:" >> build-report.txt
          conan list "sparetools-*/*" >> build-report.txt || true
          echo "" >> build-report.txt
          echo "Build Status: ${{ job.status }}" >> build-report.txt
        shell: bash
          
      - name: Upload build report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-report-${{ matrix.os }}-${{ matrix.profile_base }}-${{ matrix.build_method }}
          path: build-report.txt
          retention-days: 30

  performance-baseline:
    name: Performance Baseline Measurement
    runs-on: ubuntu-22.04
    needs: comprehensive-build
    if: github.event_name == 'schedule'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          python -m pip install conan==2.21.0
          
      - name: Build and benchmark
        run: |
          echo "⏱️ Running performance baseline measurements..."
          
          conan profile detect --force
          
          # Time the build
          START_TIME=$(date +%s)
          
          conan create packages/sparetools-base --version=2.0.0 --build=missing
          conan create packages/sparetools-openssl-tools --version=2.0.0 --build=missing
          conan create packages/sparetools-openssl --version=3.3.2 --build=missing
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          
          echo "Build completed in $DURATION seconds" > performance-report.txt
          echo "✅ Performance baseline: $DURATION seconds"
          
      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-baseline
          path: performance-report.txt
          retention-days: 90

  regression-check:
    name: Regression Check
    needs: comprehensive-build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check for build failures
        run: |
          if [ "${{ needs.comprehensive-build.result }}" != "success" ]; then
            echo "⚠️ Some builds failed in comprehensive testing"
            echo "BUILD_FAILED=true" >> $GITHUB_ENV
          else
            echo "✅ All builds succeeded"
            echo "BUILD_FAILED=false" >> $GITHUB_ENV
          fi
          
      - name: Create issue on failure
        if: env.BUILD_FAILED == 'true' && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Nightly Build Failure - ${new Date().toISOString().split('T')[0]}`,
              body: `## 🚨 Nightly Build Failure\n\nThe nightly comprehensive build has failed.\n\n**Date:** ${new Date().toISOString()}\n**Workflow:** ${context.workflow}\n**Run:** ${context.runNumber}\n\n[View Run](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\n### Action Required\nPlease investigate the build failures and fix any issues.`,
              labels: ['bug', 'nightly-failure', 'ci']
            });
            console.log(`Created issue #${issue.data.number}`);

  nightly-summary:
    name: Nightly Summary
    needs: [comprehensive-build, performance-baseline, regression-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## 🌙 Nightly Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Comprehensive Build | ${{ needs.comprehensive-build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Baseline | ${{ needs.performance-baseline.result == 'success' && '✅ Passed' || needs.performance-baseline.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Regression Check | ${{ needs.regression-check.result == 'success' && '✅ Passed' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.comprehensive-build.result }}" == "success" ]; then
            echo "### ✅ All nightly builds passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Some nightly builds failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "An issue has been created for investigation." >> $GITHUB_STEP_SUMMARY
          fi

