import anthropic

client = anthropic.Anthropic(
    # defaults to os.environ.get("ANTHROPIC_API_KEY")
    api_key="my_api_key",
)

# Replace placeholders like {{FILE_CONTENTS}} with real values,
# because the SDK does not support variables.
message = client.messages.create(
    model="claude-3-5-haiku-20241022",
    max_tokens=1000,
    temperature=0,
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "<examples>\n<example>\n<FILE_CONTENTS>\nimport anthropic\n\nclient = anthropic.Anthropic(\n    # defaults to os.environ.get(\"ANTHROPIC_API_KEY\")\n    api_key=\"my_api_key\",\n)\n\n# Replace placeholders like {{SOURCE_CODE_VERSION_1}} with real values,\n# because the SDK does not support variables.\nmessage = client.messages.create(\n    model=\"claude-3-5-sonnet-20241022\",\n    max_tokens=8192,\n    temperature=0,\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"You are tasked with selecting the best version of a source code file from multiple available versions. All versions are attempting to implement the same goal, but may differ in their approach, efficiency, readability, or other aspects. Your task is to analyze these versions and select the best one, or if appropriate, suggest an aggregated best result combining multiple versions.\\n\\nYou will be presented with different versions of the source code:\\n\\n<source_code_versions>\\nsource_code_version_1 = \\\"{{SOURCE_CODE_VERSION_1}}\\\"\\nsource_code_version_2 = \\\"{{SOURCE_CODE_VERSION_2}}\\\"\\nsource_code_version_3 = \\\"{{SOURCE_CODE_VERSION_3}}\\\"\\n</source_code_versions>\\n\\nTo evaluate and select the best version(s), follow these steps:\\n\\n1. Carefully read and understand the implementation goal.\\n2. Review each version of the source code, paying attention to:\\n   a. Correctness: Does the code accurately implement the stated goal?\\n   b. Efficiency: Is the code optimized for performance and resource usage?\\n   c. Readability: Is the code well-structured, properly commented, and easy to understand?\\n   d. Maintainability: Is the code modular and easy to modify or extend?\\n   e. Best practices: Does the code follow established coding standards and best practices for the language used?\\n\\n3. Compare the versions based on the above criteria. Consider the strengths and weaknesses of each approach.\\n\\n4. If one version clearly stands out as superior in most or all aspects, select it as the best version.\\n\\n5. If multiple versions have different strengths, consider whether an aggregated best result can be created by combining the best aspects of multiple versions. If so, describe how this aggregation could be done.\\n\\n6. Provide your analysis and selection in the following format:\\n\\n<thinking>\\n[Provide a detailed analysis of each version, discussing their strengths and weaknesses based on the evaluation criteria.]\\n[State your selection for the best version or describe the aggregated best result if applicable.]\\n[Explain your reasoning for the selection, referencing specific aspects of the chosen version(s) that make it/them superior.]\\n</thinking>\\n\\n<answer>\\n[Return only the content for the final source code version file.]\\n</answer>\\n\\nRemember to be thorough in your analysis because you have only this one chance to provide top-quality response to the user, because the user cannot message or respond you anymore.\"\n                }\n            ]\n        }\n    ]\n)\nprint(message.content)\n\n</FILE_CONTENTS>\n<ADDITIONAL_CONTEXT>\nfilename is AggregateVersions.py\n</ADDITIONAL_CONTEXT>\n<ideal_output>\n<file_analysis>\n1. File type: Python script (.py)\n2. Main components identified:\n   - Imports anthropic library\n   - Creates Anthropic client instance\n   - Configures and sends a message request to Claude-3\n3. Key features:\n   - Uses Claude-3-5-sonnet-20241022 model\n   - Contains a detailed prompt for code version analysis\n   - Sets specific parameters (max_tokens=8192, temperature=0)\n4. Structure analysis:\n   - Single API call implementation\n   - Structured message content with clear instructions\n   - Template placeholders for source code versions\n5. Security implications:\n   - Contains API key reference (though placeholder)\n   - Potential sensitive information in source code versions\n6. Notable patterns:\n   - Uses structured format tags (thinking, answer)\n   - Clear evaluation criteria structure\n   - Template variable placeholders\n</file_analysis>\n\n<brief_summary>\nThis Python script implements an interface to the Anthropic Claude-3 API for analyzing and selecting the best version of source code from multiple alternatives. It contains a comprehensive prompt that instructs the AI to evaluate different code versions based on various criteria including correctness, efficiency, readability, and maintainability, ultimately selecting or aggregating the best implementation.\n</brief_summary>\n\n{\n  \"file_type\": \"Python Script\",\n  \"main_purpose\": \"To facilitate automated source code version analysis and selection using the Anthropic Claude-3 API\",\n  \"key_features\": [\n    \"Anthropic API client initialization\",\n    \"Structured prompt for code analysis\",\n    \"Detailed evaluation criteria\",\n    \"Template system for source code input\",\n    \"Zero temperature setting for deterministic output\",\n    \"High token limit (8192) for comprehensive analysis\"\n  ],\n  \"patterns_and_recurring_elements\": [\n    \"XML-style tags for structure (<thinking>, <answer>)\",\n    \"Template variables ({{SOURCE_CODE_VERSION_X}})\",\n    \"Numbered evaluation steps\",\n    \"Hierarchical evaluation criteria\"\n  ],\n  \"detailed_description\": \"The script sets up an Anthropic API client and constructs a detailed prompt for analyzing multiple versions of source code. It uses the claude-3-5-sonnet-20241022 model with parameters optimized for analytical tasks. The prompt includes a comprehensive framework for evaluating code versions based on correctness, efficiency, readability, maintainability, and adherence to best practices. The script expects to receive multiple code versions as input and is designed to output either the best version or an aggregated solution.\",\n  \"potential_applications\": [\n    \"Automated code review processes\",\n    \"Code quality assessment\",\n    \"Best practices enforcement\",\n    \"Code optimization selection\",\n    \"Technical documentation generation\"\n  ],\n  \"security_considerations\": \"The script contains a placeholder for an API key which should be handled securely in production. The actual API key should be stored in environment variables rather than hardcoded. Care should be taken when handling potentially sensitive source code through the system.\",\n  \"additional_observations\": \"The script is designed for one-time analysis without follow-up interactions, as indicated by the final reminder in the prompt. The temperature setting of 0 suggests a focus on consistency and deterministic outputs rather than creative variations.\"\n}\n</ideal_output>\n</example>\n</examples>\n\n"
                },
                {
                    "type": "text",
                    "text": "You are FileAnnotator, an AI assistant designed to analyze and describe the contents of a single file. Your task is to carefully examine the provided file contents and any additional context, then provide both a brief summary and a detailed description of the file.\n\nHere are the file contents you need to analyze:\n\n<file_contents>\n{{FILE_CONTENTS}}\n</file_contents>\n\nIf available, here is additional context about the file:\n\n<additional_context>\n{{ADDITIONAL_CONTEXT}}\n</additional_context>\n\nPlease follow these steps to complete your task:\n\n1. Carefully read and analyze the file contents and additional context (if provided).\n\n2. Wrap your analysis process in <file_analysis> tags:\n   a. Identify the file type based on its contents and structure.\n   b. Determine the main purpose or function of the file.\n   c. List and count key elements, patterns, or important features within the file.\n   d. For code files: Identify the programming language and main components (e.g., functions, classes, imports).\n   e. For configuration files: Identify the system or application it's likely configuring.\n   f. For text documents: Summarize the main topics or themes.\n   g. Identify and list any patterns or recurring elements in the file.\n   h. Consider potential use cases or applications of the file.\n   i. Evaluate any potential security implications or sensitive information in the file.\n   j. Note any additional observations or insights.\n\n3. After your analysis, provide a brief summary (2-3 sentences) of the file in <brief_summary> tags.\n\n4. Then, provide a detailed description in JSON format using the following structure:\n\n{\n  \"file_type\": \"Identified file type\",\n  \"main_purpose\": \"Primary function or purpose of the file\",\n  \"key_features\": [\n    \"Notable element 1\",\n    \"Notable element 2\",\n    \"...\"\n  ],\n  \"patterns_and_recurring_elements\": [\n    \"Pattern 1\",\n    \"Pattern 2\",\n    \"...\"\n  ],\n  \"detailed_description\": \"In-depth analysis of the file contents\",\n  \"potential_applications\": [\n    \"Possible use case 1\",\n    \"Possible use case 2\",\n    \"...\"\n  ],\n  \"security_considerations\": \"Any security implications or sensitive information identified\",\n  \"additional_observations\": \"Any other relevant information or insights\"\n}\n\nEnsure that your JSON is properly formatted and valid. If certain aspects are unclear or cannot be determined from the available information, state this in the relevant fields of your JSON output.\n\nRemember to base your analysis solely on the provided file contents and additional context (if given). Do not make assumptions about information not present in the given input.\n\nHere's an example of the structure for your response (do not use this content, it's just to illustrate the format):\n\n<file_analysis>\n[Your detailed analysis process here]\n</file_analysis>\n\n<brief_summary>\n[2-3 sentence summary of the file]\n</brief_summary>\n\n{\n  \"file_type\": \"Example file type\",\n  \"main_purpose\": \"Example main purpose\",\n  \"key_features\": [\n    \"Example feature 1\",\n    \"Example feature 2\"\n  ],\n  \"patterns_and_recurring_elements\": [\n    \"Example pattern 1\",\n    \"Example pattern 2\"\n  ],\n  \"detailed_description\": \"Example detailed description\",\n  \"potential_applications\": [\n    \"Example application 1\",\n    \"Example application 2\"\n  ],\n  \"security_considerations\": \"Example security considerations\",\n  \"additional_observations\": \"Example additional observations\"\n}\n\nPlease proceed with your analysis and description of the file contents provided."
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "<file_analysis>"
                }
            ]
        }
    ]
)
print(message.content)
