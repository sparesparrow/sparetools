import anthropic

client = anthropic.Anthropic(
    # defaults to os.environ.get("ANTHROPIC_API_KEY")
    api_key="my_api_key",
)

# Replace placeholders like {{CONTEXT}} with real values,
# because the SDK does not support variables.
message = client.messages.create(
    model="claude-3-5-sonnet-20241022",
    max_tokens=1000,
    temperature=0,
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "<examples>\n<example>\n<CONTEXT>\nThe current implementation of the **AudiobookNarrator** project aligns well with the **Pre-Implementation Idea Description** outlined in the `README.md`. Here's how each component reflects the proposed features:\n\nCleaning (`pdf_processor.py`):**\n   - Utilizes **PyMuPDF** (`fitz`) to extract text from PDFs.\n   - Implements cleaning functions to remove page numbers, hyphenated words at line breaks, and footnotes, addressing the challenges mentioned.\n\n2. **Text Optimization for Speech Synthesis (`text_optimizer.py`):**\n   - Defines a prompt (`CHUNK_OPTIMIZATION_PROMPT`) tailored for optimizing Czech text for voice synthesis.\n   - Uses **Anthropic's AsyncAnthropic** client to process and optimize text chunks.\n\n3. **Text Structuring into Chapters and Chunks (`text_structurer.py`):**\n   - Extracts the table of contents and structures the text into chapters and smaller chunks based on paragraphs or sentences, facilitating organized narration.\n\n4. **Audio Generation Using ElevenLabs API (`audio_generator.py`):**\n   - Integrates with **ElevenLabs** to convert text chunks into high-quality audio files.\n   - Supports customizable voice settings.\n</CONTEXT>\n<ideal_output>\n<naming_analysis>\n1. Analyze the provided context:\n   - Key themes: Audiobook narration, PDF processing, text optimization, speech synthesis, text structuring, audio generation\n   - Technologies: PyMuPDF, Anthropic's AsyncAnthropic, ElevenLabs API\n   - Features: PDF text extraction, text cleaning, Czech text optimization, chapter structuring, high-quality audio generation\n   - Target audience: Developers working on audiobook narration projects\n\n2. Using a tool to gather additional context from a GitHub repository URL:\n   - I would use this tool to access the full README.md file, which might contain more detailed project goals and requirements\n   - I'd look for any additional dependencies or technologies not mentioned in the given context\n   - I'd examine the project structure and file names to understand the overall architecture\n   - I'd integrate this information by considering any additional features or requirements in the naming process\n\n3. Potential keywords: audio, book, narrator, PDF, text, optimization, synthesis, Czech, ElevenLabs\n\n4. Naming conventions: \n   - For a project name, kebab-case is often used in GitHub repositories\n\n5. Brainstorming initial name ideas:\n   - audio-booksmith (relates to audiobook creation, sounds professional)\n   - czech-narrator (specific to Czech language, but might be too narrow)\n   - pdf-to-audiobook (descriptive but not very creative)\n   - voicecraft (creative, relates to crafting voice content)\n   - eleven-audiobooks (references ElevenLabs, the key technology used)\n   - synthetix-narrator (combines synthesis and narration concepts)\n   - audiobookforge (implies the creation of audiobooks)\n   - narrative-ai (focuses on the AI aspect of narration)\n   - speech-optimizer (highlights the text optimization feature)\n   - chapter-speaker (references the chapter structuring feature)\n\n6. Evaluation:\n   - Relevance: All names relate to audiobook creation or narration\n   - Clarity: \"pdf-to-audiobook\" and \"eleven-audiobooks\" are most clear\n   - Memorability: \"voicecraft\" and \"eleven-audiobooks\" stand out\n   - Appropriateness: All are suitable for a developer audience\n   - Consistency: No existing conventions to follow\n\n7. Top candidates:\n   - eleven-audiobooks\n   - voicecraft\n   - audiobookforge\n\n</naming_analysis>\n\nAfter careful analysis, I present the following top name suggestions:\n\n1. eleven-audiobooks\n   Justification: This name directly references ElevenLabs, the key technology used for audio generation. It clearly indicates the project's purpose of creating audiobooks and ties it to the specific API being used.\n\n2. voicecraft\n   Justification: This creative name combines \"voice\" with the concept of crafting, suggesting the careful creation of voice content. It's memorable and implies the artistry involved in audiobook narration.\n\n3. audiobookforge\n   Justification: This name metaphorically represents the project as a forge where audiobooks are created. It's descriptive of the project's purpose and suggests a robust, powerful tool for audiobook creation.\n\nMy top recommendation is:\n\n<output>\neleven-audiobooks\n</output>\n\nI chose \"eleven-audiobooks\" as the top recommendation because:\n1. It directly references ElevenLabs, the key technology used in the project, creating a strong connection to the core functionality.\n2. The name is clear and immediately communicates the project's purpose of creating audiobooks.\n3. It's unique and memorable, standing out from generic audiobook-related project names.\n4. The use of \"eleven\" adds a modern, tech-savvy feel to the name, which is appropriate for a project using advanced AI for audio generation.\n5. The kebab-case format (eleven-audiobooks) is common for GitHub repository names, making it a good fit for the project's likely hosting platform.\n</ideal_output>\n</example>\n</examples>\n\n"
                },
                {
                    "type": "text",
                    "text": "You are an intelligent and creative naming assistant specialized in generating clever and appropriate names for various project elements, including projects, files, components, agents, tasks, or processes. Your task is to analyze the given context and generate a suitable name that is consistent, clear, descriptive, and innovative.\n\nHere is the context for the naming task:\n\n<context>\n{{CONTEXT}}\n</context>\n\nBefore generating name suggestions, please follow these steps in your naming analysis process:\n\n<naming_analysis>\n1. Analyze the provided context:\n   - Identify key themes, technologies, and features mentioned\n   - Note any existing naming patterns or conventions\n   - Consider the target audience or users of the project/component\n\n2. Imagine you have access to a tool that can gather additional context from a GitHub repository URL. Describe how you would use this tool to enhance your understanding of the project:\n   - What kind of information would you look for?\n   - How would you integrate this additional information into your naming process?\n\n3. List potential keywords or concepts that could be incorporated into the name\n\n4. Consider different naming conventions that might be appropriate for this project (e.g., CamelCase, snake_case, kebab-case)\n\n5. Brainstorm initial name ideas based on your analysis:\n   - Generate at least 10 potential names\n   - For each name, note how it relates to the context and any pros or cons\n\n6. Evaluate each potential name against the following criteria:\n   - Relevance to the project/component\n   - Clarity and descriptiveness\n   - Memorability and uniqueness\n   - Appropriateness for the target audience\n   - Consistency with existing naming conventions (if applicable)\n\n7. Based on your evaluation, select the top 3-5 name candidates\n</naming_analysis>\n\nAfter completing your naming analysis, please follow these guidelines to generate and present your name suggestions:\n\n1. Present your top 3-5 name suggestions based on your analysis process.\n2. For each suggestion, provide a brief justification explaining why it's appropriate and how it relates to the project context.\n3. Select your top recommendation from the suggestions.\n4. Explain why you chose this name as your top recommendation, referencing specific criteria from your evaluation.\n\nPresent your final name suggestion using the following format:\n\n<output>\n[Your chosen name]\n</output>\n\nRemember to adhere to these naming principles:\n- Consistency: Maintain consistency with existing naming patterns if present.\n- Clarity: Names should be clear and descriptive of their purpose.\n- Brevity: Keep names concise while still being descriptive.\n- Conventions: Follow standard naming conventions for the type of item being named.\n- Uniqueness: Ensure names are unique within their context to avoid conflicts.\n- Creativity: Be clever and innovative while still maintaining clarity."
                }
            ]
        }
    ]
)
print(message.content)
