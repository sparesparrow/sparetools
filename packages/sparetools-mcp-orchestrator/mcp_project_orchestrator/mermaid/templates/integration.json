{
  "name": "integration",
  "description": "Mermaid flowchart diagram",
  "type": "flowchart",
  "content": "# Integrating Mermaid Server with Other MCP Servers\n\nThe Mermaid MCP Server can be integrated with other MCP servers to create powerful workflows. Here are some common integration patterns:\n\n## GitHub Integration\n\nUse the GitHub MCP Server with Mermaid to commit generated diagrams to repositories:\n\n```python\n# Example workflow: Generate a diagram and commit it to GitHub\n# 1. Generate a diagram with Mermaid\ndiagram = mermaid_server.generate_diagram(\n    \"Create a sequence diagram for API authentication flow\", \n    theme=\"dark\"\n)\n\n# 2. Commit the diagram to GitHub\ngithub_server.create_or_update_file(\n    owner=\"your-username\",\n    repo=\"your-repo\",\n    path=\"docs/diagrams/authentication-flow.mmd\",\n    content=diagram,\n    message=\"Add authentication flow diagram\",\n    branch=\"main\"\n)\n```\n\n## Database Integration\n\nStore and retrieve diagrams using the PostgreSQL or SQLite MCP Server:\n\n```python\n# Example workflow: Store a diagram in a database\n# 1. Generate a diagram with Mermaid\ndiagram = mermaid_server.generate_diagram(\n    \"Create an ER diagram for a social media database\", \n    theme=\"vibrant\"\n)\n\n# 2. Store the diagram in a database\npostgres_server.execute_query(\n    query=\"INSERT INTO diagrams (name, content, created_at) VALUES ($1, $2, NOW())\",\n    parameters=[\"social_media_er_diagram\", diagram]\n)\n```\n\n## Memory Integration\n\nUse the Memory MCP Server to remember your commonly used diagrams:\n\n```python\n# Example workflow: Save a diagram to memory\n# 1. Generate a diagram with Mermaid\ndiagram = mermaid_server.generate_diagram(\n    \"Create a flowchart for user onboarding\", \n    theme=\"pastel\"\n)\n\n# 2. Store the diagram in memory\nmemory_server.add_memory(\n    content=f\"User onboarding flowchart: ```mermaid\\n{diagram}\\n```\",\n    metadata={\n        \"type\": \"diagram\",\n        \"diagram_type\": \"flowchart\",\n        \"topic\": \"user_onboarding\",\n        \"theme\": \"pastel\"\n    }\n)\n```\n\n## Slack Integration\n\nShare diagrams with your team via Slack:\n\n```python\n# Example workflow: Generate a diagram and post it to Slack\n# 1. Generate a diagram with Mermaid\ndiagram = mermaid_server.generate_diagram(\n    \"Create a class diagram for our e-commerce application\", \n    theme=\"default\"\n)\n\n# 2. Generate an SVG preview\nsvg_base64 = mermaid_server.preview_diagram(diagram)\n\n# 3. Post to Slack with the preview\nslack_server.post_message(\n    channel=\"#engineering\",\n    text=\"Here's the class diagram for our e-commerce app:\",\n    blocks=[\n        {\n            \"type\": \"image\",\n            \"title\": {\n                \"type\": \"plain_text\",\n                \"text\": \"E-commerce Class Diagram\"\n            },\n            \"image_url\": f\"data:image/svg+xml;base64,{svg_base64}\",\n            \"alt_text\": \"Class Diagram\"\n        }\n    ]\n)\n```\n\n## File System Integration\n\nSave diagrams and SVG previews to the filesystem:\n\n```python\n# Example workflow: Generate a diagram and save it to the filesystem\n# 1. Generate a diagram with Mermaid\ndiagram = mermaid_server.generate_diagram(\n    \"Create a network diagram for our infrastructure\", \n    theme=\"dark\"\n)\n\n# 2. Generate an SVG preview\nsvg_base64 = mermaid_server.preview_diagram(diagram)\nsvg_bytes = base64.b64decode(svg_base64)\n\n# 3. Save to filesystem\nfilesystem_server.write_file(\n    path=\"diagrams/network_diagram.mmd\",\n    content=diagram\n)\n\nfilesystem_server.write_file(\n    path=\"diagrams/network_diagram.svg\",\n    content=svg_bytes,\n    mode=\"binary\"\n)\n```\n\n## Orchestrator Integration\n\nUse an orchestrator to coordinate complex workflows:\n\n```python\n# Example workflow: Orchestrate a complex diagramming process\norchestrator_server.create_workflow(\n    name=\"diagram_workflow\",\n    steps=[\n        {\n            \"name\": \"generate_diagram\",\n            \"server\": \"mermaid-generator\",\n            \"tool\": \"generate_diagram\",\n            \"params\": {\n                \"query\": \"Create a sequence diagram for user registration\",\n                \"theme\": \"vibrant\"\n            },\n            \"output_var\": \"diagram\"\n        },\n        {\n            \"name\": \"analyze_diagram\",\n            \"server\": \"mermaid-generator\",\n            \"tool\": \"analyze_diagram\",\n            \"params\": {\n                \"diagram\": \"$diagram\"\n            },\n            \"output_var\": \"analysis\"\n        },\n        {\n            \"name\": \"modify_diagram\",\n            \"server\": \"mermaid-generator\",\n            \"tool\": \"modify_diagram\",\n            \"params\": {\n                \"diagram\": \"$diagram\",\n                \"modification\": \"Add error handling for duplicate email\",\n                \"theme\": \"vibrant\"\n            },\n            \"output_var\": \"improved_diagram\"\n        },\n        {\n            \"name\": \"save_to_github\",\n            \"server\": \"github\",\n            \"tool\": \"create_or_update_file\",\n            \"params\": {\n                \"owner\": \"your-username\",\n                \"repo\": \"your-repo\",\n                \"path\": \"docs/diagrams/user_registration.mmd\",\n                \"content\": \"$improved_diagram\",\n                \"message\": \"Add user registration diagram with error handling\",\n                \"branch\": \"main\"\n            }\n        }\n    ]\n)\n```\n\nThese integrations demonstrate how the Mermaid MCP Server can be part of larger workflows, combining with other servers to automate diagram creation, storage, sharing, and version control. ",
  "variables": {},
  "metadata": {
    "imported": true
  }
}